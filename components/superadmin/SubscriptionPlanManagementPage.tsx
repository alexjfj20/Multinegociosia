import React, { useState, useEffect, useCallback } from 'react';
import { SubscriptionPlan, SubscriptionPlanFeature, SubscriptionPlanLimits } from '../../types';
import * as subscriptionPlanService from '../../services/subscriptionPlanService';
import { LoadingSpinnerIcon, CreditCardIcon, PlusCircleIcon, PencilIcon, ArchiveIcon, CheckCircleIcon, XCircleIcon, SparklesIcon, TrashIcon } from '../icons';
import { Modal } from '../Modal';

const SubscriptionPlanManagementPage: React.FC = () => {
  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingPlan, setEditingPlan] = useState<SubscriptionPlan | null>(null);
  const [planToConfirmArchive, setPlanToConfirmArchive] = useState<SubscriptionPlan | null>(null);
  
  // Form state for creating/editing plan
  const [currentPlanData, setCurrentPlanData] = useState<Partial<SubscriptionPlan>>({});
  const [currentFeatures, setCurrentFeatures] = useState<SubscriptionPlanFeature[]>([]);
  const [newFeatureText, setNewFeatureText] = useState('');

  const initialPlanFormState: Partial<SubscriptionPlan> = {
    name: '',
    price: 0,
    priceSuffix: '/mes',
    features: [],
    limits: { maxProducts: undefined, aiGenerationsPerMonth: undefined },
    isPopular: false,
    isArchived: false,
  };

  const fetchPlans = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const fetchedPlans = await subscriptionPlanService.getSubscriptionPlans();
      setPlans(fetchedPlans);
    } catch (err) {
      console.error("Error fetching plans:", err);
      setError(err instanceof Error ? err.message : "Error al cargar planes.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchPlans();
  }, [fetchPlans]);

  const openCreateModal = () => {
    setEditingPlan(null);
    setCurrentPlanData(initialPlanFormState);
    setCurrentFeatures([]);
    setIsModalOpen(true);
  };

  const openEditModal = (plan: SubscriptionPlan) => {
    setEditingPlan(plan);
    setCurrentPlanData({ ...plan });
    setCurrentFeatures([...plan.features]);
    setIsModalOpen(true);
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setEditingPlan(null);
    setCurrentPlanData(initialPlanFormState);
    setCurrentFeatures([]);
    setNewFeatureText('');
    setError(null); // Clear form-specific errors on close
  };

  const handleFormInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    if (type === 'checkbox') {
        const { checked } = e.target as HTMLInputElement;
        setCurrentPlanData(prev => ({ ...prev, [name]: checked }));
    } else if (type === 'number') {
        setCurrentPlanData(prev => ({ ...prev, [name]: parseFloat(value) || 0 }));
    } else {
        setCurrentPlanData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleLimitInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setCurrentPlanData(prev => ({
        ...prev,
        limits: {
            ...prev.limits,
            [name]: value === '' ? undefined : parseInt(value, 10)
        }
    }));
  };

  const handleAddFeature = () => {
    if (newFeatureText.trim()) {
      setCurrentFeatures(prev => [...prev, { text: newFeatureText.trim(), enabled: true }]);
      setNewFeatureText('');
    }
  };

  const handleToggleFeatureEnabled = (index: number) => {
    setCurrentFeatures(prev => prev.map((feat, i) => i === index ? { ...feat, enabled: !feat.enabled } : feat));
  };
  
  const handleRemoveFeature = (index: number) => {
    setCurrentFeatures(prev => prev.filter((_, i) => i !== index));
  };


  const handleSavePlan = async () => {
    if (!currentPlanData.name?.trim()) {
        setError("El nombre del plan es obligatorio.");
        return;
    }
    setError(null); // Clear previous errors
    
    const planToSave: SubscriptionPlan = {
      id: editingPlan?.id || '', // Will be ignored if new, generated by service
      name: currentPlanData.name!,
      price: currentPlanData.price || 0,
      priceSuffix: currentPlanData.priceSuffix || '/mes',
      features: currentFeatures,
      limits: {
          maxProducts: currentPlanData.limits?.maxProducts,
          aiGenerationsPerMonth: currentPlanData.limits?.aiGenerationsPerMonth
      },
      isPopular: currentPlanData.isPopular || false,
      isArchived: currentPlanData.isArchived || false,
    };

    setIsLoading(true);
    try {
      if (editingPlan) {
        await subscriptionPlanService.updateSubscriptionPlan({ ...planToSave, id: editingPlan.id });
      } else {
        await subscriptionPlanService.addSubscriptionPlan(planToSave);
      }
      fetchPlans();
      handleModalClose();
    } catch (err) {
      console.error("Error saving plan:", err);
      setError(err instanceof Error ? err.message : "Error al guardar el plan.");
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleRequestArchiveToggle = (plan: SubscriptionPlan) => {
    setPlanToConfirmArchive(plan);
  };

  const confirmToggleArchivePlan = async () => {
    if (!planToConfirmArchive) return;
    setIsLoading(true);
    try {
        await subscriptionPlanService.toggleArchiveSubscriptionPlan(planToConfirmArchive.id);
        fetchPlans();
    } catch (err) {
        console.error("Error toggling archive status:", err);
        setError(err instanceof Error ? err.message : "Error al cambiar estado de archivo.");
    } finally {
        setIsLoading(false);
        setPlanToConfirmArchive(null);
    }
  };


  const PlanCard: React.FC<{ plan: SubscriptionPlan }> = ({ plan }) => (
    <div className={`p-5 border rounded-lg shadow-md hover:shadow-xl transition-shadow relative ${plan.isArchived ? 'bg-neutral-100 opacity-70' : 'bg-gradient-to-br from-neutral-50 to-white'} ${plan.isPopular ? 'ring-2 ring-primary border-primary' : 'border-neutral-200'}`}>
      {plan.isPopular && <span className="absolute top-0 right-0 bg-primary text-white text-xs font-semibold px-2 py-0.5 rounded-bl-lg rounded-tr-md">Popular</span>}
      {plan.isArchived && <span className="absolute top-2 left-2 bg-neutral-500 text-white text-xs font-semibold px-2 py-0.5 rounded-md">Archivado</span>}
      <div className="flex items-center justify-between mb-3">
        <h3 className={`text-lg font-semibold ${plan.isArchived ? 'text-neutral-500' : 'text-primary'}`}>{plan.name}</h3>
        <CreditCardIcon className={`w-7 h-7 ${plan.isArchived ? 'text-neutral-400' : 'text-primary/70'}`} />
      </div>
      <p className={`text-2xl font-bold ${plan.isArchived ? 'text-neutral-600' : 'text-neutral-800'}`}>
        ${plan.price}<span className="text-sm font-normal text-neutral-500">{plan.priceSuffix}</span>
      </p>
      <div className="my-3 space-y-1 text-xs">
        {plan.features.slice(0, 3).map((feature, idx) => (
          <p key={idx} className={`flex items-center ${feature.enabled ? (plan.isArchived ? 'text-neutral-500' : 'text-neutral-600') : 'text-neutral-400 line-through'}`}>
            {feature.enabled ? <CheckCircleIcon className="w-3 h-3 mr-1.5 text-green-500 flex-shrink-0"/> : <XCircleIcon className="w-3 h-3 mr-1.5 text-neutral-400 flex-shrink-0"/>}
            {feature.text}
          </p>
        ))}
        {plan.features.length > 3 && <p className="text-neutral-400 text-center">...</p>}
      </div>
      <p className="text-xs text-neutral-500 mt-1">Límites: Prod: {plan.limits.maxProducts ?? '∞'}, IA Gen: {plan.limits.aiGenerationsPerMonth ?? '∞'}/mes</p>
      
      <div className="mt-4 pt-3 border-t border-neutral-200 space-x-2 flex justify-end">
         <button onClick={() => handleRequestArchiveToggle(plan)} className={`p-1.5 rounded-md hover:bg-opacity-20 ${plan.isArchived ? 'text-yellow-600 hover:bg-yellow-500' : 'text-neutral-500 hover:bg-neutral-500'}`} title={plan.isArchived ? "Desarchivar Plan" : "Archivar Plan"}>
            <ArchiveIcon className="w-4 h-4"/>
        </button>
        <button onClick={() => openEditModal(plan)} className="p-1.5 text-blue-600 rounded-md hover:bg-blue-500/10" title="Editar Plan">
            <PencilIcon className="w-4 h-4"/>
        </button>
      </div>
    </div>
  );

  if (isLoading && !isModalOpen && !planToConfirmArchive) { // Only show main page loader if no modal is active
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinnerIcon className="w-12 h-12 text-primary" />
        <p className="ml-3 text-neutral-600">Cargando planes...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <header className="pb-6 border-b border-neutral-200 flex justify-between items-center">
        <div>
            <h1 className="text-3xl font-bold text-neutral-800">Gestión de Planes de Suscripción</h1>
            <p className="mt-1 text-sm text-neutral-600">
            Visualiza, edita y asigna planes de suscripción a las cuentas de administrador.
            </p>
        </div>
        <button
            onClick={openCreateModal}
            className="flex items-center px-4 py-2 bg-primary text-white text-sm font-medium rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
            <PlusCircleIcon className="w-5 h-5 mr-2"/>
            Crear Nuevo Plan
        </button>
      </header>
      
      {error && !isModalOpen && <div className="text-red-600 bg-red-50 p-4 rounded-md">Error: {error}</div>}

      {plans.length === 0 && !isLoading ? (
         <div className="text-center py-10 bg-white p-6 shadow-md rounded-lg border border-neutral-200">
          <CreditCardIcon className="w-16 h-16 text-neutral-300 mx-auto mb-4" />
          <p className="text-neutral-500">No hay planes de suscripción definidos.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {plans.filter(p => !p.isArchived).map(plan => <PlanCard key={plan.id} plan={plan} />)}
        </div>
      )}
      
      {plans.filter(p => p.isArchived).length > 0 && (
          <div className="mt-10">
              <h2 className="text-xl font-semibold text-neutral-700 mb-4">Planes Archivados</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {plans.filter(p => p.isArchived).map(plan => <PlanCard key={plan.id} plan={plan} />)}
              </div>
          </div>
      )}


      {/* Modal for Creating/Editing Plan */}
      <Modal
        isOpen={isModalOpen}
        onClose={handleModalClose}
        title={editingPlan ? 'Editar Plan de Suscripción' : 'Crear Nuevo Plan'}
        onConfirm={handleSavePlan}
        confirmText={editingPlan ? 'Guardar Cambios' : 'Crear Plan'}
        isLoading={isLoading && isModalOpen} // Show loader in modal only if saving
      >
        <form className="space-y-4 max-h-[70vh] overflow-y-auto pr-2 custom-scrollbar">
          {error && isModalOpen && <div className="text-red-500 bg-red-50 p-3 rounded-md text-xs">{error}</div>}
          <div>
            <label htmlFor="planName" className="block text-sm font-medium text-neutral-700">Nombre del Plan <span className="text-red-500">*</span></label>
            <input type="text" name="name" id="planName" value={currentPlanData.name || ''} onChange={handleFormInputChange} className="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm sm:text-sm" required />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="planPrice" className="block text-sm font-medium text-neutral-700">Precio (USD)</label>
              <input type="number" name="price" id="planPrice" value={currentPlanData.price || 0} onChange={handleFormInputChange} className="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm sm:text-sm" step="0.01" />
            </div>
            <div>
              <label htmlFor="planPriceSuffix" className="block text-sm font-medium text-neutral-700">Sufijo Precio</label>
              <input type="text" name="priceSuffix" id="planPriceSuffix" value={currentPlanData.priceSuffix || '/mes'} onChange={handleFormInputChange} className="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm sm:text-sm" placeholder="/mes"/>
            </div>
          </div>

          {/* Limits Section */}
           <div>
            <h4 className="text-sm font-medium text-neutral-700 mb-1">Límites del Plan</h4>
            <div className="grid grid-cols-2 gap-4 p-3 border border-neutral-200 rounded-md bg-neutral-50">
                <div>
                    <label htmlFor="maxProducts" className="block text-xs font-medium text-neutral-600">Máx. Productos</label>
                    <input type="number" name="maxProducts" id="maxProducts" value={currentPlanData.limits?.maxProducts ?? ''} onChange={handleLimitInputChange} className="mt-0.5 block w-full px-2 py-1.5 border border-neutral-300 rounded-md shadow-sm sm:text-xs" placeholder="Ej: 100 (vacío para ∞)" />
                </div>
                <div>
                    <label htmlFor="aiGenerationsPerMonth" className="block text-xs font-medium text-neutral-600">Gen. AI / Mes</label>
                    <input type="number" name="aiGenerationsPerMonth" id="aiGenerationsPerMonth" value={currentPlanData.limits?.aiGenerationsPerMonth ?? ''} onChange={handleLimitInputChange} className="mt-0.5 block w-full px-2 py-1.5 border border-neutral-300 rounded-md shadow-sm sm:text-xs" placeholder="Ej: 500 (vacío para ∞)" />
                </div>
            </div>
          </div>

          {/* Features Section */}
          <div>
            <label className="block text-sm font-medium text-neutral-700 mb-1">Características del Plan</label>
            <div className="space-y-2 mb-2 max-h-40 overflow-y-auto custom-scrollbar-thin border border-neutral-200 rounded-md p-2 bg-neutral-50">
              {currentFeatures.map((feature, index) => (
                <div key={index} className="flex items-center justify-between text-xs p-1.5 rounded bg-white border border-neutral-300">
                  <span className={`${feature.enabled ? 'text-neutral-700' : 'text-neutral-400 line-through'}`}>{feature.text}</span>
                  <div className="space-x-1.5">
                    <button type="button" onClick={() => handleToggleFeatureEnabled(index)} className={`p-0.5 rounded ${feature.enabled ? 'text-green-600 hover:bg-green-100' : 'text-neutral-400 hover:bg-neutral-100'}`} title={feature.enabled ? "Deshabilitar característica" : "Habilitar característica"}>
                        {feature.enabled ? <CheckCircleIcon className="w-3.5 h-3.5"/> : <XCircleIcon className="w-3.5 h-3.5"/>}
                    </button>
                    <button type="button" onClick={() => handleRemoveFeature(index)} className="p-0.5 text-red-500 hover:bg-red-100 rounded" title="Quitar característica">
                        <TrashIcon className="w-3.5 h-3.5"/>
                    </button>
                  </div>
                </div>
              ))}
              {currentFeatures.length === 0 && <p className="text-xs text-neutral-400 text-center py-1">Sin características añadidas.</p>}
            </div>
            <div className="flex items-center gap-2">
              <input 
                type="text" 
                value={newFeatureText} 
                onChange={(e) => setNewFeatureText(e.target.value)} 
                placeholder="Nueva característica..."
                className="flex-grow px-2 py-1.5 border border-neutral-300 rounded-md shadow-sm sm:text-xs" 
              />
              <button type="button" onClick={handleAddFeature} className="p-1.5 bg-primary/80 text-white rounded-md hover:bg-primary text-xs flex items-center"><PlusCircleIcon className="w-3.5 h-3.5 mr-1"/>Añadir</button>
            </div>
          </div>
          
          <div className="flex items-center space-x-3 pt-2">
            <input type="checkbox" name="isPopular" id="isPopular" checked={currentPlanData.isPopular || false} onChange={handleFormInputChange} className="h-4 w-4 text-primary border-neutral-300 rounded focus:ring-primary" />
            <label htmlFor="isPopular" className="text-sm font-medium text-neutral-700">Marcar como Popular</label>
          </div>
        </form>
      </Modal>

      {/* Confirmation Modal for Archiving/Unarchiving */}
      {planToConfirmArchive && (
        <Modal
            isOpen={!!planToConfirmArchive}
            onClose={() => setPlanToConfirmArchive(null)}
            title={planToConfirmArchive.isArchived ? "Confirmar Desarchivar Plan" : "Confirmar Archivar Plan"}
            onConfirm={confirmToggleArchivePlan}
            confirmText={planToConfirmArchive.isArchived ? "Desarchivar" : "Archivar"}
            isLoading={isLoading && !!planToConfirmArchive}
            confirmButtonClass={planToConfirmArchive.isArchived ? "bg-yellow-500 hover:bg-yellow-600 focus:ring-yellow-400" : "bg-neutral-500 hover:bg-neutral-600 focus:ring-neutral-400"}
        >
            <p>
                ¿Estás seguro de que quieres {planToConfirmArchive.isArchived ? "desarchivar" : "archivar"} el plan 
                <strong className="font-semibold"> "{planToConfirmArchive.name}"</strong>?
            </p>
            <p className="mt-2 text-xs text-neutral-500">
                {planToConfirmArchive.isArchived 
                    ? "El plan volverá a estar visible y podrá ser asignado." 
                    : "El plan se ocultará de las opciones principales pero no se eliminará permanentemente."}
            </p>
        </Modal>
      )}

    </div>
  );
};

export default SubscriptionPlanManagementPage;